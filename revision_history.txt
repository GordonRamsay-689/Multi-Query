13 Dec 2024:
-   Fixed logical error with optional import handling, if an import was not imported succesfully, assigning namespace as None in except block works, but only for top-level mo
dules. Of course, you cannot assign module.sub to anything as module does not have that attribute.

12 Dec 2024:
-   Modified Master.toggle_stream() to disable any other active stream if --stream:
is encountered for any active client.   
-   Fixed bug in select_aliases() where all keys with partially matching string to 
input provided by user would be added to list of aliases.
-   Streamlined Master. add_clients() and remove_clients(). 
-   If a client is removed while it has stream enabled, Master.active_stream is disabled. Redundant for now, 
but probably saves headaches in future.
-   Alignment in display_aliases() adjusted to be dynamically set.
-   Added flag --display: ( calls display_aliases() )
-   Added feedback to user if a client is added or removed more than just list being
updated.

12 Dec 2024:
-   Added function Session.output_stream(), containing functionality previously
in Request. Must be called with cli_lock. May be better to simply pass it the 
lock when needed, but will be less explicit that the lock is being used for the
entire function from request_handler.
-   If matches are found for the --stream: flag they will be iterated over,
allowing toggling on and off two different streams in the same message. Tested
and working as expected.
-   Fixed typos/lapsus (calling session.name instead of session.client.name). Maybe
life will be easier if the session stores name as well, albeit messier..
-   Replaced the try-except block in Master.configure_clients() with if statement 
comparing the imported namespace to None, which it is assigned to if import fails.
```
    try:
        import x
    except ImportError:
        x = None
```
-   Added try-except around (or preceding checking 'if alias in ALIAS_TO_CLIENT.keys()) 
around all ALIAS_TO_CLIENT[alias] calls. Not added for CLIENT_ID_TO_TYPE[client_id] since
a client_id cannot be incorrectly provided by the user, as it is converted via ALIAS_TO_CLIENT.

11 Dec 2024:
-   Added support for streamed content. 
Currently streamed content is hardcoded inside Request.main(), we WILL need individual 
functions for client regarding stream output but I just wanted it up and running at the moment
and adapting it is most likely very simple (I will regret this sentence).
-   Added --stream: flag which triggers Master.toggle_stream() (as of yet untested)
-   Added -s command, enables streaming inside Master.populate_sessions() on Session creation
-   Prepended underscore to variables in Client's to clearly separate what is private and 
what is public 

9 Dec 2024:
-   Removed REQUIRES_KEY as it is redundant with optional imports. 
-   Removed CONFIG_FILENAME as it is no longer used after switching to
environment variables.
-   Added variables for OpenAI IDs.
-   Added IDs as keys for themselves for all clients.
-   Added command -aliases.
-   Added functions execute_commands(), display_aliases() to master.py
-   Added parameter top_margin in ui.c_out()

9 Dec 2024:
-   Merged with branch "optional_import", making imports optional, allowing use of
just what the user needs instead of having to install libraries you are not interested
in.

1 Dec 2024:
-   Ran tests in separate branch "test":
    - Succesfully stops threads when calling RequestHandler.stop_threads()
    - If thread takes to long Succesfully times out (request handler ignores 
    any data passed back by the untimely Request)
    - If one thread times out, other threads and chats continue succesfully, but
    they will wait for the timeout as they still wait for first request. Added 
    self.request.remove(request) to RequestHandler.stop_threads() to remedy this.
    Now it works as it should
    - Cannot add client that already exists
    - If no active sessions, "no active sessions" is printed, nothing is queried
- Changes made:
    - Requests get removed from request list in RequestHandler by stop_threads() 
    preventing main thread waiting for TIMEOUT when Request blocks.
    - Added TIMEOUT variable to constants.py
    - Session no longer stores name, it is now stored by Session.Client.

30 Nov 2024:
-   Added monitor_requests() to RequestHandler, checking if any request remains in list
of requests, and if timed out. This removes the need for flags in Master or RequestHandler.
-   Removed flags from Master, now just calls RequestHandler.monitor_request().
-   Added RequestHandler.stop_threads() setting stop flags in clients (right now only 
GoogleClient) and in each Request stopping futher execution like printing responses.
-   If no query is provided but clients are provided Master.persistent_chat = True
-   Updated CLI_HELP in constants.py briefly but it is not really correct as of now.
-   Added "-help" to VALID_COMMANDS

29 Nov 2024 (in branch 'controller'):
-   Removed main(), get_script_dir(), get_config_path(), setup() from request_handler.py
-   Added get_script_dir(), get_config_path(), setup() without changes to master.py
-   Added constants SCRIPT_NAME, VALID_COMMANDS
-   Removed all CLI_ERROR as none are in use anymore.
-   Edited CLI_EXAMPLE_USAGE to reflect current state, not very refined at the moment.
-   Created function parse_arguments() and remodeled argument parsing.
-   Created class Master, far from finished.
-   Created functions in Master: configure(), stop(), stopped(), reset(),
configure_clients(), populate_clients(), populate_sessions()

25 Nov 2024:
-   Added handling for when no third argument is given (the arg specifying the 
client to use). Default client when no third argument is given is gflash.

22 Nov 2024:
-   command line arguments are now supported when running request_handler.py as 
a script.
-   Removed test() func, added main() for when module is run as __main__ with args.
-   Added setup() which gets API key and stores in config.env
-   Added configure_clients() which configures clients (currently just gemini) if they
are used
-   Added constants TYPES, REQUIRES_KEY to easily check if something requires a key
or iterate over types 
-   Removed all "-" from aliases. Removed some aliases.
-   Added some strings as constants 

18 Nov 2024:
-   Renamed module "session.py" to "api_session.py". This allows for clearer namespace 
and will be less confusing when using the variable session (which is used a lot).
-   Added command line arguments to "request_handler.py" for gemini_api_key, query and
client. Employed in the test function if __name__ == __main__

16 Nov 2024:
-   Renamed QueryHandler() as RequestHandler().
-   implemented RequestHandler.submit_requests()
-   RequestHandler.stop_threads()
-   implemented Reuqest()
-   Settled on design/method for handling the individual request threads. RequestHandler()
will handle thread creation, running and safe termination by creating individual, perishable
Request() objects: 
    * When the RequestHandler() times out with timeout method, or receives timeout 
    event from main (I removed self._stop_event for now from RequestHandler() as it might not
    be needed) it will call each Request() objects stop() function. 
    * The Request() objects will remove themselves from 
    * Request() is passed its parent so it can easily and safely use the same locks and mutables.
- implemented try-except blocks in request_handler.Request().main()

13 Nov 2024:
-   'session.py' is split into Session(), GeminiClient() and GoogleClient().
-   removed function .get_response() (send_request()) and format_response() from
Session() in favor of uniform function and variable naming for anytyhing that should
be accessible inside the -Client() objects. 
Calling send_request() from main would look like this:
    session.client.send_request()
- Added reset() function to Session(). We may want to add this to the -Client() objects
as well in the future.
-   controller Object HandleQuery() is also in 'master.py'. It is not necessary for 
Session() to function as a library. It exists for the sake of the current project 
implementation. 
We should be able to safely thread HandleQuery() since we terminate the 
object each loop, while keeping Session() and it's -Client() alive.
-   renamed CLIENT_TO_TYPE to CLIENT_ID_TO_TYPE.