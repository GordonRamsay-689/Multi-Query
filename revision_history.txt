30 Nov 2024:
-   Added monitor_requests() to RequestHandler, checking if any request remains in list
of requests, and if timed out. This removes the need for flags in Master or RequestHandler.
-   Removed flags from Master, now just calls RequestHandler.monitor_request().
-   Added RequestHandler.stop_threads() setting stop flags in clients (right now only 
GoogleClient) and in each Request stopping futher execution like printing responses.
-   If no query is provided but clients are provided Master.persistent_chat = True
-   Updated CLI_HELP in constants.py briefly but it is not really correct as of now.
-   Added "-help" to VALID_COMMANDS

29 Nov 2024 (in branch 'controller'):
-   Removed main(), get_script_dir(), get_config_path(), setup() from request_handler.py
-   Added get_script_dir(), get_config_path(), setup() without changes to master.py
-   Added constants SCRIPT_NAME, VALID_COMMANDS
-   Removed all CLI_ERROR as none are in use anymore.
-   Edited CLI_EXAMPLE_USAGE to reflect current state, not very refined at the moment.
-   Created function parse_arguments() and remodeled argument parsing.
-   Created class Master, far from finished.
-   Created functions in Master: configure(), stop(), stopped(), reset(),
configure_clients(), populate_clients(), populate_sessions()

25 Nov 2024:
-   Added handling for when no third argument is given (the arg specifying the 
client to use). Default client when no third argument is given is gflash.

22 Nov 2024:
-   command line arguments are now supported when running request_handler.py as 
a script.
-   Removed test() func, added main() for when module is run as __main__ with args.
-   Added setup() which gets API key and stores in config.env
-   Added configure_clients() which configures clients (currently just gemini) if they
are used
-   Added constants TYPES, REQUIRES_KEY to easily check if something requires a key
or iterate over types 
-   Removed all "-" from aliases. Removed some aliases.
-   Added some strings as constants 

18 Nov 2024:
-   Renamed module "session.py" to "api_session.py". This allows for clearer namespace 
and will be less confusing when using the variable session (which is used a lot).
-   Added command line arguments to "request_handler.py" for gemini_api_key, query and
client. Employed in the test function if __name__ == __main__

16 Nov 2024:
-   Renamed QueryHandler() as RequestHandler().
-   implemented RequestHandler.submit_requests()
-   RequestHandler.stop_threads()
-   implemented Reuqest()
-   Settled on design/method for handling the individual request threads. RequestHandler()
will handle thread creation, running and safe termination by creating individual, perishable
Request() objects: 
    * When the RequestHandler() times out with timeout method, or receives timeout 
    event from main (I removed self._stop_event for now from RequestHandler() as it might not
    be needed) it will call each Request() objects stop() function. 
    * The Request() objects will remove themselves from 
    * Request() is passed its parent so it can easily and safely use the same locks and mutables.
- implemented try-except blocks in request_handler.Request().main()

13 Nov 2024:
-   'session.py' is split into Session(), GeminiClient() and GoogleClient().
-   removed function .get_response() (send_request()) and format_response() from
Session() in favor of uniform function and variable naming for anytyhing that should
be accessible inside the -Client() objects. 
Calling send_request() from main would look like this:
    session.client.send_request()
- Added reset() function to Session(). We may want to add this to the -Client() objects
as well in the future.
-   controller Object HandleQuery() is also in 'master.py'. It is not necessary for 
Session() to function as a library. It exists for the sake of the current project 
implementation. 
We should be able to safely thread HandleQuery() since we terminate the 
object each loop, while keeping Session() and it's -Client() alive.
-   renamed CLIENT_TO_TYPE to CLIENT_ID_TO_TYPE.